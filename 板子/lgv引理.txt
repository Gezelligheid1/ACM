/*

有一个n×n的棋盘，左下角为(1,1)，右上角为(n,n)，若一个棋子在点(x,y)，那么走一步只能走到(x+1,y)或(x,y+1)。

现在有m个棋子，第i个棋子一开始放在(ai,1)，最终要走到(bi,n)。问有多少种方案，使得每个棋子都能从起点走到终点，且对于所有棋子，走过路径上的点互不相交。输出方案数mod 998244353的值。

两种方案不同当且仅当存在至少一个棋子所经过的点不同。

输入格式

第一行一个整数 T，表示该测试点的数据组数。
对于每组数据：
第一行两个整数n,m,分别表示棋盘的大小和起点终点的数量。
接下来m行，每行2个整数ai,bi,其意义已在题目描述中说明。

*/
const int N = 2000005;
int n, m, k;
int a[N], b[N];
ll fac[N], ifac[N];
const ll mod = 998244353;

ll fpow(ll x, ll r)
{
    ll res = 1;
    while (r)
    {
        if (r & 1)res = res * x % mod;
        r >>= 1;
        x = x * x % mod;
    }
    return res;
}

ll c[105][105];

ll gauss(int n, ll a[][105])//n行m列
{
    int i, j, k;
    ll ans = 1;
    for (i = 1; i < n; i++)
    {
        for (j = i + 1; j <= n; j++)
        {
            int x = i, y = j;
            while (a[y][i])
            {
                ll t = a[x][i] / a[y][i];
                for (k = i; k <= n; k++)
                {
                    a[x][k] = ((a[x][k] - a[y][k] * t) % mod + mod) % mod;
                }
                swap(x, y);
            }
            if (x != i)
            {
                swap(a[x], a[y]);
                ans *= -1;
            }
            if (!a[i][i])return 0;
        }
    }
    for (i = 1; i <= n; i++)
        ans = ans * a[i][i] % mod;
    return (ans + mod) % mod;
}

inline ll C(int x, int y)
{
    return fac[x] * ifac[x - y] % mod * ifac[y] % mod;
}

int main()
{
    int i, j, t, g, p, q, u, v, w, T;
    fac[0] = 1;
    for (i = 1; i <= 2000000; i++)
        fac[i] = fac[i - 1] * i % mod;
    ifac[2000000] = fpow(fac[2000000], mod - 2);
    for (i = 2000000; i; i--)
        ifac[i - 1] = ifac[i] * i % mod;
    cin >> T;
    while (T--)
    {
        scanf("%d%d", &n, &m);
        for (i = 1; i <= m; i++)
            scanf("%d%d", &a[i], &b[i]);
        for (i = 1; i <= m; i++)
            for (j = 1; j <= m; j++)
                if (a[i] <= b[j])c[i][j] = C(n - 1 + b[j] - a[i], n - 1);
                else c[i][j] = 0;
        printf("%lld\n", gauss(m, c));//m行m列
    }
    return 0;
}
