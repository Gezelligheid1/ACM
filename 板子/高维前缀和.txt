/*
https://ac.nowcoder.com/acm/contest/19483/B

智乃酱有N个物品,并且第i个物品的权值为ai,对于一个含有k个物品集合U={a[p1],a[p2],...,a[pk]}我们定义集合U的价值为a[p1]⊕a[p2]⊕...⊕a[pk],其中⊕表示异或运算。即定义一个集合的价值为：该集合所拥有的物品权值之异或和。

现在智乃酱想问你M个问题，对于每个问题他都会给你一个k个物品集合U，他想让你告诉她U的所有子集的价值之和，U的所有超集的价值之和。

在本问题中，全集的定义为这N个物品组成的集合。

输入描述:
第一行输入两个正整数N,M,(1≤N≤20,1≤M≤1e5)表示智乃酱有N个物品，M个问题。
接下来一行N个正整数ai(1≤ai≤1e6))表示物品的权值。
接下来M行分别表示M个问题。
每行第一个整数k(0≤k≤n)表示该查询中集合U的元素个数，后面k个正整数pi表示该集合中第i个物品的编号为pi(下标从1开始计算)。

输出描述:
输出M行，每行输出两个整数，中间用空格隔开。
对于每个集合U，输出U的所有子集的价值之和，U的所有超集的价值之和。

示例1
输入

3 5
1 5 9
1 1
1 2
2 1 2
3 1 2 3
0

输出

1 26
5 34
10 17
52 13
0 52

*/
#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/trie_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/priority_queue.hpp>

using namespace std;
using namespace __gnu_pbds;
using namespace __gnu_cxx;
typedef long long ll;
//tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> tr;
//__gnu_pbds::priority_queue<int, greater<int>, pairing_heap_tag> qu;
//typedef trie<string, null_type, trie_string_access_traits<>, pat_trie_tag, trie_prefix_search_node_update> pref_trie;
const int N = 1200005;
int n, m, k;
int a[N];
ll sum[N][2];

int main()
{
    int i, j, t, g, p, q, u, v, w, x, y, T;
    cin >> n >> m;
    for (i = 0; i < n; i++)
        scanf("%d", &a[1 << i]);
    for (i = 0; i < n; i++)
        for (j = 0; j < 1 << n; j++)
            if (j & (1 << i))a[j] ^= a[j ^ (1 << i)];
    for (i = 0; i < 1 << n; i++)
        sum[i][0] = sum[i][1] = a[i];
    for (i = 0; i < n; i++)
        for (j = 0; j < 1 << n; j++)
            if (j & (1 << i))sum[j][1] += sum[j ^ (1 << i)][1];//子集前缀和
            else sum[j][0] += sum[j ^ (1 << i)][0];//超集前缀和 
    while (m--)
    {
        scanf("%d", &k);
        ll ans = 0;
        for (i = 1; i <= k; i++)
            scanf("%d", &x), ans |= 1 << (x - 1);
        printf("%lld %lld\n", sum[ans][1], sum[ans][0]);
    }
    return 0;
}