const int N = 300005;
int n, m, k;
int a[N];
const ll mod = 1e9 + 7;

struct odt
{
    int l, r;
    mutable ll v;

    odt(int l = 0, int r = 0, ll v = 0) : l(l), r(r), v(v) {}

    bool operator<(const odt &rhs) const
    {
        return l < rhs.l;
    }
};

set<odt> st;

auto split(int pos)
{
    auto it = st.lower_bound(pos);
    if (it != st.end() && it->l == pos)return it;
    --it;
    auto[l, r, v]=*it;
    st.erase(it);
    st.insert(odt(l, pos - 1, v));
    return st.insert(odt(pos, r, v)).first;
}

ll query(int l, int r)
{
    ll ans = 0;
    auto itr = split(r + 1), itl = split(l);
    for (auto &it = itl; it != itr; ++it)
        ans = (ans + (it->r - it->l + 1) * it->v) % mod;
    return ans;
}

void assign(int l, int r, ll v)
{
    auto itr = split(r + 1), itl = split(l);
    st.erase(itl, itr);
    st.insert(odt(l, r, v));
}

void add(int l, int r, ll v)
{
    auto itr = split(r + 1), itl = split(l);
    for (auto &it = itl; it != itr; ++it)
        it->v = (it->v + v) % mod;
}

void copy(int l1, int r1, int l2, int r2)
{
    auto it_r1 = split(r1 + 1), it_l1 = split(l1);
    vector<pair<int, ll>> vec;
    for (auto &it = it_l1; it != it_r1; ++it)
        vec.emplace_back(it->r - it->l + 1, it->v);
    auto it_r2 = split(r2 + 1), it_l2 = split(l2);
    st.erase(it_l2, it_r2);

    int now = l2;
    for (auto[len, v]:vec)
        st.insert(odt(now, now + len - 1, v)), now += len;
}

void swap(int l1, int r1, int l2, int r2)
{
    if (l1 > l2)swap(l1, l2), swap(r1, r2);//必须要，否则会出现类似l=7,r=6的情况
    vector<pair<int, ll>> vec1, vec2;
    auto it_r1 = split(r1 + 1), it_l1 = split(l1);
    for (auto it = it_l1; it != it_r1; ++it)
        vec2.emplace_back(it->r - it->l + 1, it->v);
    st.erase(it_l1, it_r1);

    auto it_r2 = split(r2 + 1), it_l2 = split(l2);
    for (auto it = it_l2; it != it_r2; ++it)
        vec1.emplace_back(it->r - it->l + 1, it->v);
    st.erase(it_l2, it_r2);
    
    int now = l1;
    for (auto[len, v]:vec1)
        st.insert(odt(now, now + len - 1, v)), now += len;
    now = l2;
    for (auto[len, v]:vec2)
        st.insert(odt(now, now + len - 1, v)), now += len;
}

void reverse(int l, int r)
{
    auto itr = split(r + 1), itl = split(l);
    vector<pair<int, ll>> vec;
    for (auto it = itl; it != itr; ++it)
        vec.emplace_back(it->r - it->l + 1, it->v);
    st.erase(itl, itr);
    reverse(vec.begin(), vec.end());
    int now = l;
    for (auto[len, v]:vec)
        st.insert(odt(now, now + len - 1, v)), now += len;
}

int main()
{
    int p, q, u, v, w, x, y, z, T;
    cin >> n >> m;
    for (int i = 1; i <= n; i++)
        scanf("%d", &a[i]), st.insert(odt(i, i, a[i]));
    while (m--)
    {
        int op;
        scanf("%d", &op);
        if (op == 1)
        {
            int l, r;
            scanf("%d%d", &l, &r);
            printf("%lld\n", query(l, r));
        }
        else if (op == 2)
        {
            int l, r, v;
            scanf("%d%d%d", &l, &r, &v);
            assign(l, r, v);
        }
        else if (op == 3)
        {
            int l, r, v;
            scanf("%d%d%d", &l, &r, &v);
            add(l, r, v);
        }
        else if (op == 4)
        {
            int l1, r1, l2, r2;
            scanf("%d%d%d%d", &l1, &r1, &l2, &r2);
            copy(l1, r1, l2, r2);
        }
        else if (op == 5)
        {
            int l1, r1, l2, r2;
            scanf("%d%d%d%d", &l1, &r1, &l2, &r2);
            swap(l1, r1, l2, r2);
        }
        else
        {
            int l, r;
            scanf("%d%d", &l, &r);
            reverse(l, r);
        }
    }
    for (auto[l, r, v]:st)
        for (int i = l; i <= r; i++)
            printf("%lld ", v);
    return 0;
}