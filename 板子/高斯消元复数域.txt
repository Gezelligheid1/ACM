```c++
#include <bits/stdc++.h>

using namespace std;
int n = 3, m = 4;

struct Complex
{
    double x = 0, y = 0;

    friend ostream &operator<<(ostream &out, Complex a)
    {
        out << a.x << " " << a.y;
        return out;
    }

    Complex operator-() const
    {
        return {-x, -y};
    }

    friend Complex operator+(const Complex &a, const Complex &b)
    {
        return {a.x + b.x, a.y + b.y};
    }

    friend Complex operator-(const Complex &a, const Complex &b)
    {
        return {a.x - b.x, a.y - b.y};
    }

    friend Complex operator*(const Complex &a, const Complex &b)
    {
        return {a.x * b.x - a.y * b.y, a.y * b.x + a.x * b.y};
    }

    friend Complex operator/(const Complex &a, const Complex &b)
    {
        return {(a.x * b.x + a.y * b.y) / (b.x * b.x + b.y * b.y),
                (a.y * b.x - a.x * b.y) / (b.x * b.x + b.y * b.y)};
    }
} a[5][5];

int sgn(Complex x)
{
//  if (x.x <= 1e-10 && x.x >= -1e-10 && x.y <= 1e-10 && x.y >= -1e-10)
    if (fabs(x.x) <= 1e-10 && fabs(x.y) <= 1e-10)
        return 0;
    return 1;
}

void gauss()
{
    int p = 1;
    for (int i = 1; i <= n; i++)
    {
        if (!sgn(a[i][p]))
        {
            bool flag = false;
            for (int j = i + 1; j <= n; j++)
            {
                if (sgn(a[j][p]))
                {
                    flag = true;
                    swap(a[i], a[j]);
                    break;
                }
            }
            if (!flag)
            {
                if (p > m)break;
                p++;
                i--;
                continue;
            }
        }
        if (p <= m)
        {
            for (int j = p + 1; j <= m; j++)
                a[i][j] = a[i][j] / a[i][p];
            a[i][p] = {1.0, 0};
            for (int j = i + 1; j <= n; j++)
            {
                if (!sgn(a[j][p]))continue;
                Complex s = a[j][p];
                for (int k = 1; k <= m; k++)
                    a[j][k] = a[j][k] - s * a[i][k];
            }
        }
    }
    p = 1;
    for (int i = 1; i < n; i++)
    {
        for (int j = p; j <= m; j++)
        {
            if (!sgn(a[i + 1][j]))p++;
            else break;
        }
        if (p <= m)
        {
            for (int k = i; k; k--)
            {
                Complex s = a[k][p];
                for (int j = 1; j <= m; j++)
                {
                    a[k][j] = a[k][j] - s * a[i + 1][j];
                }
            }
        }
    }
}

Complex z[5], w[5];
Complex aa[5];
int vis[5];


int main()
{
    int T;
    cin >> T;
    while (T--)
    {
        aa[1] = aa[2] = aa[3] = aa[4] = {0, 0};
        memset(vis, 0, sizeof(vis));
        for (int i = 1; i <= 3; i++)
            scanf("%lf %lf %lf %lf", &z[i].x, &z[i].y, &w[i].x, &w[i].y);
        for (int i = 1; i <= n; i++)
        {
            a[i][1] = z[i], a[i][2] = {1.0, 0};
            a[i][3] = -z[i] * w[i], a[i][4] = -w[i];
        }
        scanf("%lf%lf", &z[0].x, &z[0].y);
        gauss();
        int p = 1;
        for (int i = 1; i <= 3; i++)//方程求解，一行三个非0系数的情况可能有问题？
        {
            while (p <= 4 && !sgn(a[i][p]))
                p++;
            bool flag = true;
            for (int j = p + 1; j <= 4; j++)
            {
                if (sgn(a[i][j]))
                {
                    if (!vis[j])
                        aa[j] = {1, 0}, vis[j] = 1;
                    aa[p] = -a[i][j] / a[i][p] * aa[j];
                    flag = false;
                    break;
                }
            }
            if (flag)aa[p] = {0, 0};
        }
        Complex ans = (aa[1] * z[0] + aa[2]) / (aa[3] * z[0] + aa[4]);
        printf("%.15lf %.15lf\n", ans.x, ans.y);
    }
    return 0;
}
```