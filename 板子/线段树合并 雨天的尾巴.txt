const int N = 100005;
int n, m, k;
int a[N], sz[N], d[N], top[N], f[N], son[N];
int c[N << 6], lc[N << 6], rc[N << 6], col[N << 6];
int cnt, root[N];
vector<int> vec[N];

void dfs1(int u, int fa)
{
    sz[u] = 1, son[u] = 0;
    f[u] = fa, d[u] = d[fa] + 1;
    for (auto &v:vec[u])
    {
        if (v == fa)continue;
        dfs1(v, u);
        sz[u] += sz[v];
        if (sz[son[u]] < sz[v])son[u] = v;
    }
}

void dfs2(int u, int topu)
{
    top[u] = topu;
    if (son[u])dfs2(son[u], topu);
    for (auto &v:vec[u])
    {
        if (v == f[u] || v == son[u])continue;
        dfs2(v, v);
    }
}

inline void pushup(int k)
{
    if (!lc[k] || rc[k] && c[lc[k]] < c[rc[k]])
    {
        c[k] = c[rc[k]];
        col[k] = col[rc[k]];
    }
    else
    {
        c[k] = c[lc[k]];
        col[k] = col[lc[k]];
    }
}

void update(int l, int r, int &k, int x, int v)
{
    if (!k)k = ++cnt;
    if (l == r)
    {
        c[k] += v;
        col[k] = x;
        return;
    }
    int m = (l + r) >> 1;
    if (x <= m)update(l, m, lc[k], x, v);
    else update(m + 1, r, rc[k], x, v);
    pushup(k);
}

int merge(int a, int b, int l, int r)
{
    if (!a || !b)return a | b;
    if (l == r)
    {
        c[a] += c[b];
        return a;
    }
    int m = (l + r) >> 1;
    lc[a] = merge(lc[a], lc[b], l, m);
    rc[a] = merge(rc[a], rc[b], m + 1, r);
    pushup(a);
    return a;
}

int lca(int x, int y)
{
    while (top[x] != top[y])
    {
        if (d[top[x]] < d[top[y]])
            swap(x, y);
        x = f[top[x]];
    }
    return d[x] < d[y] ? x : y;
}

int ans[N];
const int len = 100000;

void dfs(int u)
{
    for (auto &v:vec[u])
    {
        if (v == f[u])continue;
        dfs(v);
        root[u] = merge(root[u], root[v], 1, len);
    }
    ans[u] = col[root[u]];
    if (!c[root[u]])ans[u] = 0;
}

int main()
{
    int i, j, t, g, p, q, u, v, w, x, y, z, T;
    cin >> n >> m;
    cnt = 0;
    for (i = 1; i < n; i++)
        scanf("%d%d", &u, &v), vec[u].emplace_back(v), vec[v].emplace_back(u);
    d[0] = 0;
    dfs1(1, 0);
    dfs2(1, 1);
    while (m--)
    {
        scanf("%d%d%d", &x, &y, &z);
        int l = lca(x, y);
        update(1, len, root[x], z, 1);
        update(1, len, root[y], z, 1);
        update(1, len, root[l], z, -1);
        update(1, len, root[f[l]], z, -1);
    }
    dfs(1);
    for (i = 1; i <= n; i++)
        printf("%d\n", ans[i]);
    return 0;
}