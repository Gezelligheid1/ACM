const int N = 200005;
int n, m, k;
int a[N];
ll c[N << 6];
int lc[N << 6], rc[N << 6], rt[N];
int cnt;

inline void pushup(int k)
{
    c[k] = c[lc[k]] + c[rc[k]];
}

void build(int l, int r, int &k)
{
    if (!k)k = ++cnt;
    if (l == r)c[k] = a[l];
    else
    {
        int m = (l + r) >> 1;
        build(l, m, lc[k]);
        build(m + 1, r, rc[k]);
        pushup(k);
    }
}

void update(int l, int r, int &k, int x, int v)
{
    if (!k)k = ++cnt;
    if (l == r)c[k] += v;
    else
    {
        int m = (l + r) >> 1;
        if (x <= m)update(l, m, lc[k], x, v);
        else update(m + 1, r, rc[k], x, v);
        pushup(k);
    }
}

ll query(int L, int R, int l, int r, int k)
{
    if (!k)return 0;
    if (L <= l && r <= R)return c[k];
    int m = (l + r) >> 1;
    ll ans = 0;
    if (L <= m)ans += query(L, R, l, m, lc[k]);
    if (R > m)ans += query(L, R, m + 1, r, rc[k]);
    return ans;
}

void merge(int &a, int b, int l, int r)
{
    if (!a || !b)
    {
        a |= b;
        return;
    }
    if (l == r)
    {
        c[a] += c[b];
        return;
    }
    int m = (l + r) >> 1;
    merge(lc[a], lc[b], l, m);
    merge(rc[a], rc[b], m + 1, r);
    pushup(a);
}

void split(int a, int &b, ll x)//a保留小于等于x部分
{
    if (!a)return;
    b = ++cnt;
    if (x > c[lc[a]])split(rc[a], rc[b], x - c[lc[a]]);
    else swap(rc[a], rc[b]);//a右子树分裂给b
    if (x < c[lc[a]])split(lc[a], lc[b], x);
    c[b] = c[a] - x;
    c[a] = x;
}

int kth(int l, int r, int k, ll x)
{
    if (l == r)return l;
    int m = (l + r) >> 1;
    if (c[lc[k]] >= x)return kth(l, m, lc[k], x);
    else return kth(m + 1, r, rc[k], x - c[lc[k]]);
}

int main()
{
    int p, q, u, v, w, x, y, z, T;
    cin >> n >> m;
    for (int i = 1; i <= n; i++)
        scanf("%d", &a[i]);
    int now = 1;
    build(1, n, rt[1]);
    while (m--)
    {
        int op;
        scanf("%d%d", &op, &p);
        if (op == 0)
        {
            scanf("%d%d", &x, &y);
            ll t1 = query(1, x - 1, 1, n, rt[p]), t2 = query(x, y, 1, n, rt[p]);//注意要先求出来，否则split会导致t2的值出错
            split(rt[p], rt[++now], t1);
            int tmp;
            split(rt[now], tmp, t2);
            merge(rt[p], tmp, 1, n);
        }
        else if (op == 1)
        {
            int t;
            scanf("%d", &t);
            merge(rt[p], rt[t], 1, n);
        }
        else if (op == 2)
        {
            scanf("%d%d", &x, &y);
            update(1, n, rt[p], y, x);
        }
        else if (op == 3)
        {
            scanf("%d%d", &x, &y);
            printf("%lld\n", query(x, y, 1, n, rt[p]));
        }
        else
        {
            scanf("%d", &k);
            if (c[rt[p]] < k)puts("-1");
            else printf("%d\n", kth(1, n, rt[p], k));
        }
    }
    return 0;
}