double a[N][N];
const double eps = 1e-8;

int gauss(int n, double a[][N])
{
    int line = 1;
    for (int k = 1; k <= n; k++)
    {
        int p = line;
        for (int i = line + 1; i <= n; i++)
            if (fabs(a[i][k]) > fabs(a[p][k]))
                p = i;
        if (a[p][k] == 0)continue;
        for (int j = 1; j <= n + 1; j++)
            swap(a[line][j], a[p][j]);
        for (int i = 1; i <= n; i++)
        {
            if (i == line)continue;
            double t = a[i][k] / a[line][k];
            for (int j = k + 1; j <= n + 1; j++)
                a[i][j] -= a[line][j] * t;
        }
        ++line;
    }
    if (line <= n)
    {
        while (line <= n)
            if (fabs(a[line++][n + 1]) > eps)return -1;//无解
        return 0;//无穷多解
    }
    //上述操作结束后，矩阵会变成这样
    /*
    k1*a=e1
    k2*b=e2
    k3*c=e3
    k4*d=e4
    */
    for (int i = 1; i <= n; i++)
    {
        a[i][n + 1] /= a[i][i], a[i][i] = 1;
        if (fabs(a[i][n + 1]) < 1e-8)a[i][n + 1] = 0;
    }
    return 1;
}