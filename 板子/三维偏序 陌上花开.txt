const int N = 200005;
int n, m, k;
int c[N];
int maxn;

struct point
{
    int a, b, c, cnt, ans;

    friend bool operator==(const point &u, const point &v)
    {
        return u.a == v.a && u.b == v.b && u.c == v.c;
    }
} b[N], s[N];

inline int lowbit(int x)
{
    return x & -x;
}

void update(int i, int k)
{
    while (i <= maxn)
    {
        c[i] += k;
        i += lowbit(i);
    }
}

int getsum(int i)
{
    int ans = 0;
    while (i)
    {
        ans += c[i];
        i -= lowbit(i);
    }
    return ans;
}

void cdq(int l, int r)
{
    if (l == r)return;
    int m = (l + r) >> 1;
    cdq(l, m);
    cdq(m + 1, r);
    sort(s + l, s + m + 1, [&](point u, point v)
    {
        return u.b < v.b;
    });
    sort(s + m + 1, s + r + 1, [&](point u, point v)
    {
        return u.b < v.b;
    });
    int i = l;
    for (int j = m + 1; j <= r; j++)
    {
        while (i <= m && s[i].b <= s[j].b)
            update(s[i].c, s[i].cnt), i++;
        s[j].ans += getsum(s[j].c);
    }
    while (--i >= l)
        update(s[i].c, -s[i].cnt);
}

int ans[N];

int main()
{
    int i, j, p, q, u, v, w, x, y, z, T;
    cin >> n >> maxn;
    for (i = 1; i <= n; i++)
        scanf("%d%d%d", &b[i].a, &b[i].b, &b[i].c);
    sort(b + 1, b + n + 1, [&](point u, point v)
    {
        if (u.a != v.a)
            return u.a < v.a;
        else if (u.b != v.b)
            return u.b < v.b;
        return u.c < v.c;
    });
    int len = 0;
    int cnt = 0;
    for (i = 1; i <= n; i++)//考虑元素相同情况对答案的影响，i==n时不影响合并
    {
        cnt++;
        if (!(b[i] == b[i + 1]))
        {
            s[++len] = b[i];
            s[len].cnt = cnt;
            cnt = 0;
        }
    }
    cdq(1, len);
    for (i = 1; i <= len; i++)
        ans[s[i].cnt + s[i].ans - 1] += s[i].cnt;
    for (i = 0; i < n; i++)
        printf("%d\n", ans[i]);
    return 0;
}