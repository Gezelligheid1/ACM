const int N = 1100005;
int n, m, k;
const ll mod = 1e9 + 9;
int a[N], b[N];
int f[21][N], g[21][N], h[21][N];

void FMT(int *f, int n)
{
    for (int i = 0; i < n; i++)
        for (int j = 0; j < 1 << n; j++)
            if (j & (1 << i))
            {
                f[j] += f[j ^ (1 << i)];
                if (f[j] >= mod)f[j] -= mod;
            }
}

void conv(int n)
{
    for (int i = 0; i <= n; i++)
        for (int j = 0; j <= i; j++)
            for (int k = 0; k < 1 << n; k++)
                f[i][k] = (f[i][k] + 1ll * g[j][k] * h[i - j][k]) % mod;
}

void IFMT(int *f, int n)
{
    for (int i = 0; i < n; i++)
        for (int j = 0; j < 1 << n; j++)
            if (j & (1 << i))
            {
                f[j] -= f[j ^ (1 << i)];
                if (f[j] < 0)f[j] += mod;
            }
}

int main()
{
    int p, q, u, v, w, x, y, z, T;
    cin >> n;
    for (int i = 0; i < 1 << n; i++)
        scanf("%d", &a[i]);
    for (int i = 0; i < 1 << n; i++)
        scanf("%d", &b[i]);
    for (int i = 0; i < 1 << n; i++)
    {
        g[__builtin_popcount(i)][i] = a[i];
        h[__builtin_popcount(i)][i] = b[i];
    }
    for (int i = 0; i <= n; i++)
    {
        FMT(g[i], n);
        FMT(h[i], n);
    }
    conv(n);
    for (int i = 0; i <= n; i++)
        IFMT(f[i], n);
    for (int i = 0; i < 1 << n; i++)
        printf("%d ", f[__builtin_popcount(i)][i]);
    return 0;
}