```c++
namespace polybase {//范围为1e9需要先取模,别忘记改模数,原根和数组长度
    constexpr ll mod = 998244353, g = 3, L = 1 << 20;

    ll fpow(ll x, ll r)
    {
        ll result = 1;
        while (r)
        {
            if (r & 1)result = result * x % mod;
            r >>= 1;
            x = x * x % mod;
        }
        return result;
    }

    int w[L], _ = []
    {
        ll x = fpow(g, (mod - 1) / L);
        w[L / 2] = 1;
        for (int i = L / 2 + 1; i < L; i++)
            w[i] = w[i - 1] * x % mod;
        for (int i = L / 2 - 1; i >= 0; i--)
            w[i] = w[i << 1];
        return 0;
    }();

    inline int norm(int n) { return 1 << __lg(n * 2 - 1); }

    void dft(ll *a, int n)
    {
        for (int k = n >> 1; k; k >>= 1)
            for (int i = 0; i < n; i += k << 1)
                for (int j = 0; j < k; j++)
                {
                    ll &x = a[i + j], y = a[i + j + k];
                    a[i + j + k] = (x - y + mod) * w[k + j] % mod;
                    x += y;
                    if (x >= mod)x -= mod;
                }
    }

    void idft(ll *a, int n)
    {
        for (int k = 1; k < n; k <<= 1)
            for (int i = 0; i < n; i += k << 1)
                for (int j = 0; j < k; j++)
                {
                    ll x = a[i + j], y = a[i + j + k] * w[k + j] % mod;
                    a[i + j + k] = x - y < 0 ? x - y + mod : x - y;
                    a[i + j] += y;
                    if (a[i + j] >= mod)a[i + j] -= mod;
                }
        for (int i = 0, inv = mod - (mod - 1) / n; i < n; i++)
            a[i] = a[i] * inv % mod;
        reverse(a + 1, a + n);
    }

    struct poly : public vector<ll>
    {
        using vector<ll>::vector;
#define T (*this)

        poly modxk(int k) const
        {
            k = min(k, (int) size());
            return poly(begin(), begin() + k);
        }

        poly rev() const { return poly(rbegin(), rend()); }

        friend void dft(poly &a) { dft(a.data(), a.size()); }

        friend void idft(poly &a) { idft(a.data(), a.size()); }

        friend poly operator*(const poly &x, const poly &y)
        {
            if (x.empty() || y.empty())return poly();
            poly a(x), b(y);
            int len = a.size() + b.size() - 1;
            int n = norm(len);
            a.resize(n), b.resize(n);
            dft(a), dft(b);
            for (int i = 0; i < n; i++)
                a[i] = a[i] * b[i] % mod;
            idft(a);
            a.resize(len);
            return a;
        }

        poly operator+(const poly &b)
        {
            poly a(T);
            if (a.size() < b.size())
                a.resize(b.size());
            for (int i = 0; i < b.size(); i++)//用b.size()防止越界
            {
                a[i] += b[i];
                if (a[i] >= mod)a[i] -= mod;
            }
            return a;
        }

        poly operator-(const poly &b)
        {
            poly a(T);
            if (a.size() < b.size())
                a.resize(b.size());
            for (int i = 0; i < b.size(); i++)
            {
                a[i] -= b[i];
                if (a[i] < 0)a[i] += mod;
            }
            return a;
        }

        poly operator*(const ll p)
        {
            poly a(T);
            for (auto &x:a)
                x = x * p % mod;
            return a;
        }

        poly &operator<<=(int r) { return insert(begin(), r, 0), T; }//注意逗号,F(x)*(x^r)

        poly operator<<(int r) const { return poly(T) <<= r; }

        poly operator>>(int r) const { return r >= size() ? poly() : poly(begin() + r, end()); }

        poly &operator>>=(int r) { return T = T >> r; }//F[x]/(x^r)

        poly deriv()//求导
        {
            if (empty())return T;
            poly a(size() - 1);
            for (int i = 1; i < size(); i++)//注意是size()
                a[i - 1] = T[i] * i % mod;
            return a;
        }

        poly integ()//积分
        {
            poly a(size() + 1);
            for (int i = 1; i < a.size(); i++)//注意是a.size()
                a[i] = T[i - 1] * fpow(i, mod - 2) % mod;
            return a;
        }

        poly inv(int n)
        {
            poly a{fpow(T[0], mod - 2)};
            int k = 1;
            while (k < n)
            {
                k <<= 1;
                a = (a * 2 - modxk(k) * a * a).modxk(k);
            }
            return a.modxk(n);
        }

        poly sqrt(int n)//f[0]必须等于1
        {
            poly a{1};
            int k = 1;
            const ll inv2 = fpow(2, mod - 2);
            while (k < n)
            {
                k <<= 1;
                a = ((modxk(k) * a.inv(k)).modxk(k) + a) * inv2;
            }
            return a.modxk(n);
        }

        poly ln(int n)//需要保证f[0]=1
        {
            return (deriv() * inv(n)).integ().modxk(n);
        }

        poly exp(int n)//需要保证f[0]=0
        {
            poly a{1};
            int k = 1;
            while (k < n)
            {
                k <<= 1;
                a = (a * (poly{1} - a.ln(k) + modxk(k))).modxk(k);
            }
            return a.modxk(n);
        }

        poly power(ll k, int n)//若a[0]!=1,只能做k未对mod取模情况,因为(1)处fpow的k要对phi(mod)取模,此时用power2
        {
            if (k == 0)return poly(n) + poly{1};
            int d = 0;
            poly a(T);
            a.resize(n);
            while (d < n && !a[d])d++;
            if (d * k >= n)return poly(n);
            a = poly(a.begin() + d, a.end() - d * (k - 1));
            ll inv = fpow(a[0], mod - 2);
            a = ((a * inv).ln(n) * k).exp(n) * fpow(inv, mod - 1 - k % (mod - 1));//(1)
            a.insert(a.begin(), d * k, 0);
            a.resize(n);
            return a;
        }

        poly power2(ll k, ll k2, int n)//k对mod取模,k2对phi(mod)取模,若k在取模前已经大于等于n并且F[0]==0,则返回全0,见P5273 main函数
        {
            if (k == 0)return poly(n) + poly{fpow(T[0], k2)};
            int d = 0;
            poly a(T);
            a.resize(n);
            while (d < n && !a[d])d++;
            if (d * k >= n)return poly(n);
            a = poly(a.begin() + d, a.end() - d * (k - 1));
            ll inv = fpow(a[0], mod - 2);
            a = ((a * inv).ln(n) * k).exp(n) * fpow(inv, mod - 1 - k2 % (mod - 1));//(1)
            a.insert(a.begin(), d * k, 0);
            a.resize(n);
            return a;
        }

        poly shift(int b)
        {
            int n = T.size();
            poly f(n), g(n);
            for (int i = 0; i < n; i++)
            {
                f[i] = T[i] * fac[i] % mod;
                g[i] = fpow(b, i) * ifac[i] % mod;
            }
            f = f.rev() * g;
            f.resize(n);
            reverse(f.begin(), f.end());
            for (int i = 0; i < n; i++)
                f[i] = f[i] * ifac[i] % mod;
            return f;
        }

#undef T
    };

    poly operator/(const poly &x, const poly &y)
    {
        int n = x.size(), m = y.size();
        if (n < m)return {0};
        poly a(x.rev()), b(y.rev());
        int k = norm(n - m + 1);
        a.resize(k);
        return (a * b.inv(k)).modxk(n - m + 1).rev();
    }

    pair<poly, poly> div(const poly &a, const poly &b)
    {
        int m = b.size();
        poly c = a / b;
        return {c, a.modxk(m - 1) - (b * c).modxk(m - 1)};
    }

    poly operator%(const poly &a, const poly &b) { return div(a, b).second; }

    ll divAt(poly f, poly g, ll n)//[x^n](f/g)
    {
        assert(f.size() == g.size());
        int len = f.size(), m = 1 << __lg(len * 2 - 1);
        for (; n; n >>= 1)
        {
            f.resize(m * 2), g.resize(m * 2);
            dft(f), dft(g);
            for (int i = 0; i < m * 2; i++)
                f[i] = f[i] * g[i ^ 1] % mod;
            for (int i = 0; i < m; i++)
                g[i] = g[i << 1] * g[i << 1 | 1] % mod;
            g.resize(m);
            idft(f), idft(g);
            for (int i = 0, j = n & 1; i < len; i++, j += 2)
                f[i] = f[j];
            f.resize(len), g.resize(len);
        }
        return f[0];
    }

    struct SegTree
    {
        vector<poly> p;
        int n, raw_n;

        SegTree(const poly &a)
        {
            n = norm(raw_n = a.size());
            p.resize(n << 1);
            for (int i = 0; i < n; i++)
                p[i + n] = poly{1, i < raw_n ? mod - a[i] : 0};
            for (int i = n - 1; i; i--)
            {
                int l = i << 1, r = l | 1, k = (p[l].size() - 1) << 1;
                p[l].resize(k), dft(p[l]);
                p[r].resize(k), dft(p[r]);
                p[i].resize(k);
                for (int j = 0; j < k; j++)
                    p[i][j] = p[l][j] * p[r][j] % mod;
                idft(p[i]);
                p[i].emplace_back((p[i][0] - 1 + mod) % mod);
                p[i][0] = 1;
            }
        }

        poly eval(const poly &f)//多点求值
        {
            int m = f.size();
            if (m == 1)return poly(raw_n, f[0]);//raw_n个f[0]
            poly q = f.rev() * p[1].inv(m);
            q.resize(m);
            if (m > n)q >>= m - n;
            else q <<= n - m;
            for (int k = n, o = 1; k > 1; k >>= 1)
                for (int i = 0; i < n; i += k, o++)
                {
                    if (i >= raw_n)continue;
                    ll *a = &q[i], *l = p[o << 1].data(), *r = p[o << 1 | 1].data();
                    dft(a, k);
                    poly x(k), y(k);
                    for (int j = 0; j < k; j++)x[j] = a[j] * r[j] % mod;
                    for (int j = 0; j < k; j++)y[j] = a[j] * l[j] % mod;
                    idft(x), idft(y);
                    for (int j = k / 2; j < k; j++)*a++ = x[j];
                    for (int j = k / 2; j < k; j++)*a++ = y[j];
                }
            return q.modxk(raw_n);
        }

        poly interpolate(const poly &b)//快速插值
        {
            assert(b.size() == raw_n);
            poly q = eval(p[1].modxk(raw_n + 1).rev().deriv());
            for (int i = 0; i < raw_n; i++)q[i] = fpow(q[i], mod - 2) * b[i] % mod;
            q.resize(n);
            for (int k = 1, h = n >> 1; k < n; k <<= 1, h >>= 1)
                for (int i = 0, o = h; i < n; i += k << 1, o++)
                {
                    if (i >= raw_n)continue;
                    ll *a = &q[i], *b = &q[i + k], *l = p[o << 1].data(), *r = p[o << 1 | 1].data();
                    poly x(k << 1), y(k << 1);
                    for (int j = 0; j < k; j++)
                        x[j] = a[j], y[j] = b[j];
                    dft(x), dft(y);
                    for (int j = 0; j < k * 2; j++)
                        x[j] = (x[j] * r[j] + y[j] * l[j]) % mod;
                    idft(x);
                    for (int j = 0; j < k * 2; j++)a[j] = x[j];
                }
            q.resize(raw_n);
            return q.rev();
        }
    };

    poly cdq(const poly &G, int f0, int n)//F[0...n-1]
    {
        poly F(n);
        F[0] = f0;
        function<void(int, int)> solve = [&](int l, int r)//左闭右开
        {
            if (l + 1 >= r)return;
            int m = (l + r) >> 1;
            solve(l, m);
            poly A = poly(F.begin() + l, F.begin() + m) * poly(G.begin() + 1, G.begin() + r - l);
            for (int i = m; i < r; i++)
            {
                F[i] += A[i - l - 1];
                if (F[i] >= mod)F[i] -= mod;
            }
            solve(m, r);
        };
        solve(0, n);//别忘记
        return F;
    }

    //斯特林数的n都是闭的,上面函数的n都是开的
    poly getS1(int n)//S1(n, i), i = 0,1,2...n
    {
        if (n == 0)return {1};
        poly f = getS1(n / 2);
        f = f * f.shift(f.size() - 1);
        if (n & 1)f = (f << 1) + f * (n - 1);
        return f;
    }

    poly getS2(int n)//S2(n, i), i = 0,1,2...n
    {
        poly a(n + 1), b(n + 1);
        for (int i = 0; i <= n; i++)
        {
            a[i] = i & 1 ? mod - ifac[i] : ifac[i];
            b[i] = fpow(i, n) * ifac[i] % mod;
        }
        a = a * b;
        a.resize(n + 1);
        return a;
    }

    poly getS1(int n, int k)//S1(i, k), i = 0,1,2...n
    {
        poly f(n + 1);
        for (int i = 1; i <= n; i++)//注意是1
            f[i] = ifac[i] * fac[i - 1] % mod;
        f = f.power(k, n + 1);
        for (int i = 0; i <= n; i++)
            f[i] = f[i] * fac[i] % mod * ifac[k] % mod;
        return f;
    }

    poly getS2(int n, int k)//S2(i, k), i = 0,1,2...n
    {
        if (n < k)return poly(n + 1);
        function<poly(int)> solve = [&](int n)
        {
            if (n == 0)return poly{1};
            poly f = solve(n / 2);
            f = f * f.shift((mod + 1 - (int) f.size()) % mod);
            if (n & 1)f = (f << 1) - f * n;
            return f;
        };
        poly f = solve(k).rev().modxk(n - k + 1);
        return f.inv(n - k + 1) << k;
    }
}
using namespace polybase;
```

P5273多项式幂级数main函数：

```c++
int main()
{
    int p, q, u, v, w, x, y, z, T;
    cin >> n;
    string s;
    cin >> s;
    ll k = 0, k2 = 0;
    bool flag = 0;
    for (auto x:s)
    {
        k = (k * 10 + x - '0') % mod;
        k2 = (k2 * 10 + x - '0') % (mod - 1);
        flag |= k >= n;
    }
    poly F(n);
    for (int i = 0; i < n; i++)
        scanf("%lld", &F[i]);
    F = flag && !F[0] ? poly(n) : F.power2(k, k2, n);//k>=n&&F[0]时特判
    for (int i = 0; i < n; i++)
        printf("%lld ", F[i]);
    return 0;
}
```

P5050多项式多点求值main函数

```c++
int main()
{
    int p, q, u, v, w, x, y, z, T;
    cin >> n >> m;
    poly F(n + 1);
    for (int i = 0; i <= n; i++)
        scanf("%d", &F[i]);
    poly a(m);
    for (int i = 0; i < m; i++)
        scanf("%d", &a[i]);
    SegTree G(a);
    F = G.eval(F);
    for (int i = 0; i < m; i++)
        printf("%lld\n", F[i]);
    return 0;
}
```

P5158多项式快速插值

```c++
int main()
{
    int p, q, u, v, w, x, y, z, T;
    cin >> n;
    poly a(n), b(n);
    for (int i = 0; i < n; i++)
        scanf("%d%d", &a[i], &b[i]);
    SegTree G(a);
    poly F = G.interpolate(b);
    for (int i = 0; i < n; i++)
        printf("%lld ", F[i]);
    return 0;
}
```

P4723常系数齐次线性递推

## 题目描述

求一个满足 $k$ 阶齐次线性递推数列 ${a_i}$ 的第 $n$ 项，即：

$$a_n=\sum\limits_{i=1}^{k}f_i \times a_{n-i}$$

## 输入格式

第一行两个数 $n$,$k$，如题面所述。

第二行 $k$ 个数，表示 $f_1 \ f_2 \ \cdots \ f_k$

第三行 $k$ 个数，表示 $a_0 \ a_1 \ \cdots \ a_{k-1}$

## 输出格式

一个数，表示 $a_n \bmod 998244353$ 的值

## 样例 #1

### 样例输入 #1

```
6 4
3 -1 0 4
-2 3 1 5
```

### 样例输出 #1

```
73
```

## 提示

$N = 10^{9} , K = 32000 $

保证读入的数字均为 $[-10^9,10^9]$ 内的整数。

```c++
int main()
{
    int p, q, u, v, w, x, y, z, T;
    cin >> n >> k;
    poly F(k + 1), A(k);
    F[0] = mod - 1;
    for (int i = 1; i <= k; i++)
        scanf("%lld", &F[i]), F[i] = (F[i] % mod + mod) % mod;
    for (int i = 0; i < k; i++)
        scanf("%lld", &A[i]), A[i] = (A[i] % mod + mod) % mod;
    A = A * F;
    A.resize(F.size());
    A.back() = 0;
    cout << divAt(A, F, n);
    return 0;
}
```

