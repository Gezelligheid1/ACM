//二分匹配

定理1：最大匹配数 = 最小点覆盖数（这是 Konig 定理）

定理2：最大独立数 = 顶点数 - 最小覆盖数 = 顶点数 - 最大匹配数

定理3：最小路径覆盖数 = 顶点数 - 最大匹配数

#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstring>
#include <string>
#include <algorithm>
#include <vector>
#include <queue>
#include <sstream>
#include <map>
#include <unordered_map>
using namespace std;
typedef long long ll;
int m, n;
int u, v;
int linker[505], g[505][505];
bool used[505];
bool dfs(int u)
{
    for (int v = 0; v < m; v++)
    {
        if (g[u][v] && !used[v])
        {
            used[v] = true;
            if (linker[v] == -1 || dfs(linker[v]))
            {
                linker[v] = u;
                return true;
            }
        }
    }
    return false;
}
int hungary()
{
    int i, ans;
    ans = 0;
    memset(linker, -1, sizeof(linker));
    for (i = 0; i < n; i++)
    {
        memset(used, false, sizeof(used));
        if (dfs(i))ans++;
    }
    return ans;
}
int main()
{
    int i, j, k, t, p, q, w, x, y;
    while (scanf("%d", &n) == 1 && n)
    {
        scanf("%d %d", &m, &k);
        memset(g, 0, sizeof(g));
        for (i = 0; i < k; i++)
        {
            scanf("%d %d %d", &t, &u, &v);
            //if (u != 0 && v != 0)//一开始不需要换机器模式
                g[u][v] = 1;
        }
        printf("%d\n", hungary());
    }
    return 0;
}