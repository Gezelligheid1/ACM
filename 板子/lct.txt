const int N = 100005;
int n, m, k;

struct lct
{
    struct point
    {
        int v, sum;
    } c[N];
    int f[N], son[N][2], rev[N], stk[N];
#define ls son[x][0]
#define rs son[x][1]

    int is_root(int x)//判断是否为根
    {
        return son[f[x]][0] != x && son[f[x]][1] != x;
    }

    void pushup(int x)//注意都是x!!!
    {
        c[x].sum = c[ls].sum ^ c[rs].sum ^ c[x].v;
    }

    void pushrev(int x)
    {
        swap(ls, rs);
        rev[x] ^= 1;
    }

    void pushdown(int x)
    {
        if (rev[x])
        {
            if (ls)pushrev(ls);
            if (rs)pushrev(rs);
            rev[x] = 0;
        }
    }

    int get(int x) { return son[f[x]][1] == x; }

    void rotate(int x)
    {
        int y = f[x], z = f[y], k = get(x);
        if (!is_root(y))son[z][son[z][1] == y] = x;//一定要判断
        son[y][k] = son[x][!k], f[son[x][!k]] = y;
        son[x][!k] = y, f[y] = x, f[x] = z;
        pushup(y), pushup(x);
    }

    void splay(int x)
    {
        int now = x, top = 0;
        while (!is_root(now))
            stk[++top] = now, now = f[now];
        stk[++top] = now;
        while (top)pushdown(stk[top--]);
        for (int fa; fa = f[x], !is_root(x); rotate(x))
            if (!is_root(fa))rotate(get(fa) == get(x) ? fa : x);
    }

    void access(int x)//当前节点到根都变为实链连接
    {
        for (int y = 0; x; x = f[y = x])
            splay(x), rs = y, pushup(x);
    }

    void makeroot(int x)//换根
    {
        access(x), splay(x);
        pushrev(x);
    }

    int findroot(int x)//找根
    {
        access(x), splay(x);
        while (ls)pushdown(x), x = ls;
        splay(x);
        return x;
    }

    void split(int x, int y)//把x-y的路径变成一个splay,这里再把y变成根
    {
        makeroot(x);
        access(y), splay(y);
    }

    void link(int x, int y)//连边
    {
        makeroot(x);
        if (findroot(y) != x)f[x] = y;//这里只执行了makeroot(x),所以只能使f[x] = y
    }

    void cut(int x, int y)//删边
    {
        makeroot(x);
        if (findroot(y) == x && f[y] == x && !son[y][0])
        {
            f[y] = son[x][1] = 0;
            pushup(x);
        }
    }

#undef ls
#undef rs
} t;

int main()
{
    int p, q, u, v, w, x, y, z, T;
    cin >> n >> m;
    for (int i = 1; i <= n; i++)
        scanf("%d", &t.c[i].v);
    while (m--)
    {
        int op, x, y;
        scanf("%d%d%d", &op, &x, &y);
        if (op == 0)
        {
            t.split(x, y);
            printf("%d\n", t.c[y].sum);
        }
        else if (op == 1)
            t.link(x, y);
        else if (op == 2)
            t.cut(x, y);
        else
            t.splay(x), t.c[x].v = y;//查询时由于split会执行pushup所以此处不需要pushup
    }
    return 0;
}