struct matrix//注意这n
{
    ll a[41][45] = {0};//由于下面n1会扩展，所以第二维额外加4
    static constexpr int n = 3;

    friend matrix operator*(const matrix &u, const matrix &v)
    {
        matrix ans;
        int n1 = n;
        while (n1 & 3)
            ++n1;
        for (int i = 1; i <= n; ++i)
        {
            ll *z = ans.a[i];
            for (int k = 1; k <= n; ++k)
            {
                const ll x = u.a[i][k], *y = v.a[k];
                for (int j = 4; j <= n1; j += 4)
                {
                    z[j - 3] += x * y[j - 3];
                    z[j - 2] += x * y[j - 2];
                    z[j - 1] += x * y[j - 1];
                    z[j] += x * y[j];
                }
            }
        }
        return ans;
    }

    matrix &operator*=(const matrix &u)
    {
        matrix ans = *this * u;
        for (int i = 1; i <= n; i++)
            for (int j = 1; j <= n; j++)
                this->a[i][j] = ans[i][j];
        return *this;
    }

    ll *operator[](const int i) { return a[i]; }

    const ll *operator[](const int i) const { return a[i]; }

    matrix operator+(const matrix &u)
    {
        matrix ans(*this);
        for (int i = 1; i <= n; i++)
            for (int j = 1; j <= n; j++)
                ans[i][j] += u[i][j];
        return ans;
    }

    bool operator!=(const matrix &u)
    {
        for (int i = 1; i <= n; i++)
            for (int j = 1; j <= n; j++)
                if (this->a[i][j] != u[i][j])return 1;
        return 0;
    }

    matrix fpow(ll r)
    {
        matrix x = *this;//一次性可改引用
        matrix result;
        for (int i = 1; i <= n; i++)
            result.a[i][i] = 1;
        while (r)
        {
            if (r & 1)result = result * x;
            r >>= 1;
            x = x * x;
        }
        return result;
    }
};

matrix E = []
{
    matrix E;
    for (int i = 1; i <= matrix::n; i++)
        E[i][i] = 1;
    return E;
}();