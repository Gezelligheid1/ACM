#include<bits/stdc++.h>

using namespace std;
const int N = 100005;
typedef long long ll;
int n;
int a[N];
vector<int> vec[N];

struct Node
{
    int num1[22], num0[22];

    Node(int v)
    {
        for (int i = 0; i < 22; i++)
        {
            if (v & 1)
                num1[i]++;
            else
                num0[i]++;
            v >>= 1;
        }
    }

    Node()
    {
        memset(num1, 0, sizeof(num1));
        memset(num0, 0, sizeof(num0));
    }

    Node &operator+=(int v)
    {
        for (int i = 0; i < 22; i++)
        {
            if (v & 1)
                num1[i]++;
            else
                num0[i]++;
            v >>= 1;
        }
        return *this;
    }

    Node &operator+=(Node &b)
    {
        for (int i = 0; i < 22; i++)
        {
            num1[i] += b.num1[i];
            num0[i] += b.num0[i];
        }
        return *this;
    }

    ll operator^(Node &b)
    {
        ll ret = 0;
        for (int i = 0; i < 22; i++)
        {
            ret += (long long) num1[i] * b.num0[i] * (1 << i);
            ret += (long long) b.num1[i] * num0[i] * (1 << i);
        }
        return ret;
    }
};

map<int, Node> mp[N];
ll ans = 0;
int cnt = 0;
int id[N];

void dfs(int u, int fa)
{
    int flag = 0;
    for (int i = 0; i < vec[u].size(); i++)
    {
        int v = vec[u][i];
        if (v == fa)continue;
        dfs(v, u);
        if (flag == 0)
        {
            flag = 1;
            id[u] = id[v], mp[id[u]][a[u]] += u;
            continue;
        }
        if (mp[id[v]].size() >= mp[id[u]].size())
        {
            swap(id[v], id[u]);
        }
        for (auto x:mp[id[v]])
            if (mp[id[u]].count(x.first ^ a[u]))
                ans += mp[id[u]][x.first ^ a[u]] ^ x.second;

        for (auto x:mp[id[v]])
            mp[id[u]][x.first] += x.second;
    }
    if (vec[u].size() == 1)
        mp[id[u] = ++cnt][a[u]] += u;
}

int main()
{
    ios::sync_with_stdio(false);
    int u, v;
    cin >> n;
    for (int i = 1; i <= n; i++)
        cin >> a[i];
    for (int i = 1; i < n; i++)
        cin >> u >> v, vec[u].emplace_back(v), vec[v].emplace_back(u);
    dfs(1, 0);
    cout << ans;
    return 0;
}