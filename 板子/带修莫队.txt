#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/trie_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/priority_queue.hpp>

using namespace std;
using namespace __gnu_pbds;
using namespace __gnu_cxx;
typedef long long ll;
//tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> son;
//__gnu_pbds::priority_queue<int, greater<int>, pairing_heap_tag> qu;
//typedef trie<string, null_type, trie_string_access_traits<>, pat_trie_tag, trie_prefix_search_node_update> pref_trie;
const int N = 200005;
int n, m, k;
int a[N], vis[N * 5], block[N];
int cnt;
int ans[N];
struct point
{
    int l, r, time, id;
} s[N];
struct node
{
    int pos, x;
} c[N];

inline void add(int x)
{
    if (!vis[a[x]]++)cnt++;
}

inline void sub(int x)
{
    if (!--vis[a[x]])cnt--;
}

int len1, len2;

int main()
{
    int i, j, t, p, q, u, v, w, x, y, z, T;
    cin >> n >> m;
    int size = cbrt((ll) n * n);
    for (i = 1; i <= n; i++)
        scanf("%d", &a[i]), block[i] = (i - 1) / size + 1;
    char ss[5];
    for (i = 1; i <= m; i++)
    {
        scanf("%s", ss);
        if (ss[0] == 'Q')
            ++len1, scanf("%d%d", &s[len1].l, &s[len1].r), s[len1].time = len2, s[len1].id = len1;
        else
            ++len2, scanf("%d%d", &c[len2].pos, &c[len2].x);
    }
    sort(s + 1, s + len1 + 1, [&](point u, point v)//奇偶排序
    {
        if (block[u.l] != block[v.l])
            return u.l < v.l;
        else if (block[u.r] != block[v.r])
            return block[u.l] & 1 ? u.r < v.r : u.r > v.r;
        else return u.time < v.time;
    });
    int l = 1, r = 0;
    t = 0;
    for (i = 1; i <= len1; i++)
    {
        while (l < s[i].l)
            cnt -= !--vis[a[l++]];
        while (l > s[i].l)
            cnt += !vis[a[--l]]++;
        while (r < s[i].r)
            cnt += !vis[a[++r]]++;
        while (r > s[i].r)
            cnt -= !--vis[a[r--]];
        while (t < s[i].time)
        {
            ++t;
            if (l <= c[t].pos && c[t].pos <= r)
            {
                cnt -= !--vis[a[c[t].pos]];
                cnt += !vis[c[t].x]++;
            }
            swap(a[c[t].pos], c[t].x);
        }
        while (t > s[i].time)
        {
            if (l <= c[t].pos && c[t].pos <= r)
            {
                cnt -= !--vis[a[c[t].pos]];
                cnt += !vis[c[t].x]++;
            }
            swap(a[c[t].pos], c[t].x);
            --t;
        }
        ans[s[i].id] = cnt;
    }
    for (i = 1; i <= len1; i++)
        printf("%d\n", ans[i]);
    return 0;
}