const int N = 200005;
int n, m, k;
ll a[N], c[N << 2], add[N << 2], mul[N << 2];
ll mod;

void pushup(int k)
{
    c[k] = (c[k << 1] + c[k << 1 | 1]) % mod;
}

void pushdown(int l, int r, int k)
{
    if (add[k] != 0 || mul[k] != 1)
    {
        int m = (l + r) >> 1;
        c[k << 1] = (c[k << 1] * mul[k] + (m - l + 1) * add[k]) % mod;
        c[k << 1 | 1] = (c[k << 1 | 1] * mul[k] + (r - m) * add[k]) % mod;
        mul[k << 1] = mul[k << 1] * mul[k] % mod;
        mul[k << 1 | 1] = mul[k << 1 | 1] * mul[k] % mod;
        add[k << 1] = (add[k << 1] * mul[k] + add[k]) % mod;
        add[k << 1 | 1] = (add[k << 1 | 1] * mul[k] + add[k]) % mod;
        mul[k] = 1, add[k] = 0;
    }
}

void build(int l, int r, int k)
{
    if (l == r)c[k] = a[l] % mod, add[k] = 0, mul[k] = 1;
    else
    {
        add[k] = 0, mul[k] = 1;
        int m = (l + r) >> 1;
        build(l, m, k << 1);
        build(m + 1, r, k << 1 | 1);
        pushup(k);
    }
}

void update(int flag, ll p, int L, int R, int l, int r, int k)
{
    if (L <= l && r <= R)
    {
        if (flag == 1)
        {
            c[k] = c[k] * p % mod;
            mul[k] = mul[k] * p % mod;
            add[k] = add[k] * p % mod;
        }
        else if (flag == 2)
        {
            c[k] = (c[k] + (r - l + 1) * p) % mod;
            add[k] = (add[k] + p) % mod;
        }
    }
    else
    {
        pushdown(l, r, k);
        int m = (l + r) >> 1;
        if (L <= m)update(flag, p, L, R, l, m, k << 1);
        if (R > m)update(flag, p, L, R, m + 1, r, k << 1 | 1);
        pushup(k);
    }
}

ll query(int L, int R, int l, int r, int k)
{
    if (L <= l && r <= R)return c[k];
    pushdown(l, r, k);
    ll ans = 0;
    int m = (l + r) >> 1;
    if (L <= m)ans += query(L, R, l, m, k << 1);
    if (R > m)ans += query(L, R, m + 1, r, k << 1 | 1);
    return ans % mod;
}

int main()
{
    int i, j, t, p, q, u, v, w, x, y, z, T;
    cin >> n >> m >> mod;
    for (i = 1; i <= n; i++)
        scanf("%lld", &a[i]);
    build(1, n, 1);
    while (m--)
    {
        scanf("%d%d%d", &p, &x, &y);
        if (p == 3)printf("%lld\n", query(x, y, 1, n, 1));
        else
        {
            scanf("%d", &k);
            update(p, k, x, y, 1, n, 1);
        }
    }
    return 0;
}